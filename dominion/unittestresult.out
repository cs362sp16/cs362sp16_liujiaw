
**************** Unit Test Result *****************
**             Unit Test 1: getCost()            **
**                    Passed                     **
********************** End ************************


**************** Unit Test Result *****************
**             Unit Test 2: fullDeckCount()      **
**                    Passed                     **
********************** End ************************


**************** Unit Test Result *****************
**             Unit Test 3: drawCard()           **
**                    Passed                     **
********************** End ************************


**************** Unit Test Result *****************
**             Unit Test 4: whoseTurn()          **
**                    Passed                     **
********************** End ************************


**************** Card Test Result *****************
**             Card Test 1: smithy               **
**                    Failed                     **
********************** End ************************


**************** Card Test Result *****************
**             Card Test 2: council_room         **
**                    Failed                     **
********************** End ************************


**************** Card Test Result *****************
**             Card Test 3: village              **
**                    Failed                     **
********************** End ************************


**************** Card Test Result *****************
**             Card Test 4: salvager             **
**                    Failed                     **
********************** End ************************

File 'dominion.c'
Lines executed:27.48% of 644
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      224:    9:    if (*(int*)a > *(int*)b)
    #####:   10:        return 1;
      224:   11:    if (*(int*)a < *(int*)b)
       80:   12:        return -1;
      144:   13:    return 0;
      224:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;
        -:   43:    //set up random number generator
        8:   44:    SelectStream(1);
        8:   45:    PutSeed((long)randomSeed);
        -:   46:    
        -:   47:    //check number of players
       16:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:    
        -:   53:    //set number of players
        8:   54:    state->numPlayers = numPlayers;
        -:   55:    
        -:   56:    //check selected kingdom cards are different
      176:   57:    for (i = 0; i < 10; i++)
        -:   58:    {
     1760:   59:        for (j = 0; j < 10; j++)
        -:   60:        {
     1520:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
      800:   65:        }
       80:   66:    }
        -:   67:    
        -:   68:    
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:    
        -:   72:    //set number of Curse cards
        8:   73:    if (numPlayers == 2)
        -:   74:    {
        8:   75:        state->supplyCount[curse] = 10;
        8:   76:    }
    #####:   77:    else if (numPlayers == 3)
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:    
        -:   86:    //set number of Victory cards
        8:   87:    if (numPlayers == 2)
        -:   88:    {
        8:   89:        state->supplyCount[estate] = 8;
        8:   90:        state->supplyCount[duchy] = 8;
        8:   91:        state->supplyCount[province] = 8;
        8:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:    
        -:  100:    //set number of Treasure cards
        8:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:    state->supplyCount[silver] = 40;
        8:  103:    state->supplyCount[gold] = 30;
        -:  104:    
        -:  105:    //set number of Kingdom cards
      336:  106:    for (i = adventurer; i <= treasure_map; i++)        //loop all cards
        -:  107:    {
     2640:  108:        for (j = 0; j < 10; j++)              //loop chosen cards
        -:  109:        {
     1240:  110:            if (kingdomCards[j] == i)
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
      160:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:                {
        8:  115:                    if (numPlayers == 2){
        8:  116:                        state->supplyCount[i] = 8;
        8:  117:                    }
    #####:  118:                    else{ state->supplyCount[i] = 12; }
        8:  119:                }
        -:  120:                else
        -:  121:                {
       72:  122:                    state->supplyCount[i] = 10;
        -:  123:                }
       80:  124:                break;
        -:  125:            }
        -:  126:            else    //card is not in the set choosen for the game
        -:  127:            {
     1160:  128:                state->supplyCount[i] = -1;
        -:  129:            }
     1160:  130:        }
        -:  131:        
      160:  132:    }
        -:  133:    
        -:  134:    ////////////////////////
        -:  135:    //supply intilization complete
        -:  136:    
        -:  137:    //set player decks
       48:  138:    for (i = 0; i < numPlayers; i++)
        -:  139:    {
       16:  140:        state->deckCount[i] = 0;
      128:  141:        for (j = 0; j < 3; j++)
        -:  142:        {
       48:  143:            state->deck[i][j] = estate;
       48:  144:            state->deckCount[i]++;
       48:  145:        }
      256:  146:        for (j = 3; j < 10; j++)
        -:  147:        {
      112:  148:            state->deck[i][j] = copper;
      112:  149:            state->deckCount[i]++;
      112:  150:        }
       16:  151:    }
        -:  152:    
        -:  153:    //shuffle player decks
       48:  154:    for (i = 0; i < numPlayers; i++)
        -:  155:    {
       16:  156:        if ( shuffle(i, state) < 0 )
        -:  157:        {
    #####:  158:            return -1;
        -:  159:        }
       16:  160:    }
        -:  161:    
        -:  162:    //draw player hands
       48:  163:    for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:        //initialize hand size to zero
       16:  166:        state->handCount[i] = 0;
       16:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //  {
        -:  171:        //    drawCard(i, state);
        -:  172:        //  }
       16:  173:    }
        -:  174:    
        -:  175:    //set embargo tokens to 0 for all supply piles
      448:  176:    for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      216:  178:        state->embargoTokens[i] = 0;
      216:  179:    }
        -:  180:    
        -:  181:    //initialize first player's turn
        8:  182:    state->outpostPlayed = 0;
        8:  183:    state->phase = 0;
        8:  184:    state->numActions = 1;
        8:  185:    state->numBuys = 1;
        8:  186:    state->playedCardCount = 0;
        8:  187:    state->whoseTurn = 0;
        8:  188:    state->handCount[state->whoseTurn] = 0;
        -:  189:    //int it; move to top
        -:  190:    
        -:  191:    //Moved draw cards to here, only drawing at the start of a turn
       96:  192:    for (it = 0; it < 5; it++){
       40:  193:        drawCard(state->whoseTurn, state);
       40:  194:    }
        -:  195:    
        8:  196:    updateCoins(state->whoseTurn, state, 0);
        -:  197:    
        8:  198:    return 0;
        8:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:    
        -:  203:    
        -:  204:    int newDeck[MAX_DECK];
       16:  205:    int newDeckPos = 0;
        -:  206:    int card;
        -:  207:    int i;
        -:  208:    
       16:  209:    if (state->deckCount[player] < 1)
    #####:  210:        return -1;
       16:  211:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:    
      352:  214:    while (state->deckCount[player] > 0) {
      160:  215:        card = floor(Random() * state->deckCount[player]);
      160:  216:        newDeck[newDeckPos] = state->deck[player][card];
      160:  217:        newDeckPos++;
     1072:  218:        for (i = card; i < state->deckCount[player]-1; i++) {
      376:  219:            state->deck[player][i] = state->deck[player][i+1];
      376:  220:        }
      160:  221:        state->deckCount[player]--;
        -:  222:    }
      352:  223:    for (i = 0; i < newDeckPos; i++) {
      160:  224:        state->deck[player][i] = newDeck[i];
      160:  225:        state->deckCount[player]++;
      160:  226:    }
        -:  227:    
       16:  228:    return 0;
       16:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:    int card;
    #####:  234:    int coin_bonus = 0;     //tracks coins gain from actions
        -:  235:    
        -:  236:    //check if it is the right phase
    #####:  237:    if (state->phase != 0)
        -:  238:    {
    #####:  239:        return -1;
        -:  240:    }
        -:  241:    
        -:  242:    //check if player has enough actions
    #####:  243:    if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:        return -1;
        -:  246:    }
        -:  247:    
        -:  248:    //get card played
    #####:  249:    card = handCard(handPos, state);
        -:  250:    
        -:  251:    //check if selected card is an action
    #####:  252:    if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:        return -1;
        -:  255:    }
        -:  256:    
        -:  257:    //play card
    #####:  258:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:        return -1;
        -:  261:    }
        -:  262:    
        -:  263:    //reduce number of actions
    #####:  264:    state->numActions--;
        -:  265:    
        -:  266:    //update coins (Treasure cards may be added with card draws)
    #####:  267:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:    
    #####:  269:    return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:    int who;
        -:  274:    if (DEBUG){
        -:  275:        printf("Entering buyCard...\n");
        -:  276:    }
        -:  277:    
        -:  278:    // I don't know what to do about the phase thing.
        -:  279:    
    #####:  280:    who = state->whoseTurn;
        -:  281:    
    #####:  282:    if (state->numBuys < 1){
        -:  283:        if (DEBUG)
        -:  284:            printf("You do not have any buys left\n");
    #####:  285:        return -1;
    #####:  286:    } else if (supplyCount(supplyPos, state) <1){
        -:  287:        if (DEBUG)
        -:  288:            printf("There are not any of that type of card left\n");
    #####:  289:        return -1;
    #####:  290:    } else if (state->coins < getCost(supplyPos)){
        -:  291:        if (DEBUG)
        -:  292:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:        return -1;
        -:  294:    } else {
    #####:  295:        state->phase=1;
        -:  296:        //state->supplyCount[supplyPos]--;
    #####:  297:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:        
    #####:  299:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:        state->numBuys--;
        -:  301:        if (DEBUG)
        -:  302:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:    }
        -:  304:    
        -:  305:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:    //state->discardCount[who]++;
        -:  307:    
    #####:  308:    return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
        7:  312:    return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:    int currentPlayer = whoseTurn(state);
    #####:  317:    return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:    return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:    int i;
        1:  326:    int count = 0;
        -:  327:    
       12:  328:    for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
        5:  330:        if (state->deck[player][i] == card) count++;
        5:  331:    }
        -:  332:    
       12:  333:    for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
        5:  335:        if (state->hand[player][i] == card) count++;
        5:  336:    }
        -:  337:    
        2:  338:    for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:        if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:    
        1:  343:    return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
       11:  347:    return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:    int k;
        -:  352:    int i;
    #####:  353:    int currentPlayer = whoseTurn(state);
        -:  354:    
        -:  355:    //Discard hand
    #####:  356:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:        state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:    }
    #####:  360:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:    //Code for determining the player
    #####:  363:    if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:    }
        -:  366:    else{
    #####:  367:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:    }
        -:  369:    
    #####:  370:    state->outpostPlayed = 0;
    #####:  371:    state->phase = 0;
    #####:  372:    state->numActions = 1;
    #####:  373:    state->coins = 0;
    #####:  374:    state->numBuys = 1;
    #####:  375:    state->playedCardCount = 0;
    #####:  376:    state->handCount[state->whoseTurn] = 0;
        -:  377:    
        -:  378:    //int k; move to top
        -:  379:    //Next player draws hand
    #####:  380:    for (k = 0; k < 5; k++){
    #####:  381:        drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:    }
        -:  383:    
        -:  384:    //Update money
    #####:  385:    updateCoins(state->whoseTurn, state , 0);
        -:  386:    
    #####:  387:    return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:    int i;
        -:  392:    int j;
        -:  393:    
        -:  394:    //if stack of Province cards is empty, the game ends
    #####:  395:    if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:        return 1;
        -:  398:    }
        -:  399:    
        -:  400:    //if three supply pile are at 0, the game ends
    #####:  401:    j = 0;
    #####:  402:    for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:        if (state->supplyCount[i] == 0)
        -:  405:        {
    #####:  406:            j++;
    #####:  407:        }
    #####:  408:    }
    #####:  409:    if ( j >= 3)
        -:  410:    {
    #####:  411:        return 1;
        -:  412:    }
        -:  413:    
    #####:  414:    return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:    
        -:  419:    int i;
    #####:  420:    int score = 0;
        -:  421:    //score from hand
    #####:  422:    for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:    
        -:  432:    //score from discard
    #####:  433:    for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:    
        -:  443:    //score from deck
    #####:  444:    for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:    
    #####:  454:    return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:    int i;
        -:  459:    int j;
        -:  460:    int highScore;
        -:  461:    int currentPlayer;
        -:  462:    
        -:  463:    //get score for each player
    #####:  464:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:        //set unused player scores to -9999
    #####:  467:        if (i >= state->numPlayers)
        -:  468:        {
    #####:  469:            players[i] = -9999;
    #####:  470:        }
        -:  471:        else
        -:  472:        {
    #####:  473:            players[i] = scoreFor (i, state);
        -:  474:        }
    #####:  475:    }
        -:  476:    
        -:  477:    //find highest score
    #####:  478:    j = 0;
    #####:  479:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:        if (players[i] > players[j])
        -:  482:        {
    #####:  483:            j = i;
    #####:  484:        }
    #####:  485:    }
    #####:  486:    highScore = players[j];
        -:  487:    
        -:  488:    //add 1 to players who had less turns
    #####:  489:    currentPlayer = whoseTurn(state);
    #####:  490:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:        if ( players[i] == highScore && i > currentPlayer )
        -:  493:        {
    #####:  494:            players[i]++;
    #####:  495:        }
    #####:  496:    }
        -:  497:    
        -:  498:    //find new highest score
    #####:  499:    j = 0;
    #####:  500:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:        if ( players[i] > players[j] )
        -:  503:        {
    #####:  504:            j = i;
    #####:  505:        }
    #####:  506:    }
    #####:  507:    highScore = players[j];
        -:  508:    
        -:  509:    //set winners in array to 1 and rest to 0
    #####:  510:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:        if ( players[i] == highScore )
        -:  513:        {
    #####:  514:            players[i] = 1;
    #####:  515:        }
        -:  516:        else
        -:  517:        {
    #####:  518:            players[i] = 0;
        -:  519:        }
    #####:  520:    }
        -:  521:    
    #####:  522:    return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{ int count;
        -:  527:    int deckCounter;
       44:  528:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:        
        -:  530:        //Step 1 Shuffle the discard pile back into a deck
        -:  531:        int i;
        -:  532:        //Move discard to deck
    #####:  533:        for (i = 0; i < state->discardCount[player];i++){
    #####:  534:            state->deck[player][i] = state->discard[player][i];
    #####:  535:            state->discard[player][i] = -1;
    #####:  536:        }
        -:  537:        
    #####:  538:        state->deckCount[player] = state->discardCount[player];
    #####:  539:        state->discardCount[player] = 0;//Reset discard
        -:  540:        
        -:  541:        //Shufffle the deck
    #####:  542:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:        
        -:  544:        if (DEBUG){//Debug statements
        -:  545:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:        }
        -:  547:        
    #####:  548:        state->discardCount[player] = 0;
        -:  549:        
        -:  550:        //Step 2 Draw Card
    #####:  551:        count = state->handCount[player];//Get current player's hand count
        -:  552:        
        -:  553:        if (DEBUG){//Debug statements
        -:  554:            printf("Current hand count: %d\n", count);
        -:  555:        }
        -:  556:        
    #####:  557:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:        
    #####:  559:        if (deckCounter == 0)
    #####:  560:            return -1;
        -:  561:        
    #####:  562:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:        state->deckCount[player]--;
    #####:  564:        state->handCount[player]++;//Increment hand count
    #####:  565:    }
        -:  566:    
        -:  567:    else{
       44:  568:        int count = state->handCount[player];//Get current hand count for player
        -:  569:        int deckCounter;
        -:  570:        if (DEBUG){//Debug statements
        -:  571:            printf("Current hand count: %d\n", count);
        -:  572:        }
        -:  573:        
       44:  574:        deckCounter = state->deckCount[player];//Create holder for the deck count
       44:  575:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       44:  576:        state->deckCount[player]--;
       44:  577:        state->handCount[player]++;//Increment hand count
        -:  578:    }
        -:  579:    
       44:  580:    return 0;
       44:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
       27:  585:    switch( cardNumber )
        -:  586:    {
        -:  587:        case curse:
        1:  588:            return 0;
        -:  589:        case estate:
        1:  590:            return 2;
        -:  591:        case duchy:
        1:  592:            return 5;
        -:  593:        case province:
        1:  594:            return 8;
        -:  595:        case copper:
        1:  596:            return 0;
        -:  597:        case silver:
        1:  598:            return 3;
        -:  599:        case gold:
        1:  600:            return 6;
        -:  601:        case adventurer:
        1:  602:            return 6;
        -:  603:        case council_room:
        1:  604:            return 5;
        -:  605:        case feast:
        1:  606:            return 4;
        -:  607:        case gardens:
        1:  608:            return 4;
        -:  609:        case mine:
        1:  610:            return 5;
        -:  611:        case remodel:
        1:  612:            return 4;
        -:  613:        case smithy:
        1:  614:            return 4;
        -:  615:        case village:
        1:  616:            return 3;
        -:  617:        case baron:
        1:  618:            return 4;
        -:  619:        case great_hall:
        1:  620:            return 3;
        -:  621:        case minion:
        1:  622:            return 5;
        -:  623:        case steward:
        1:  624:            return 3;
        -:  625:        case tribute:
        1:  626:            return 5;
        -:  627:        case ambassador:
        1:  628:            return 3;
        -:  629:        case cutpurse:
        1:  630:            return 4;
        -:  631:        case embargo:
        1:  632:            return 2;
        -:  633:        case outpost:
        1:  634:            return 5;
        -:  635:        case salvager:
        1:  636:            return 4;
        -:  637:        case sea_hag:
        1:  638:            return 4;
        -:  639:        case treasure_map:
        1:  640:            return 4;
        -:  641:    }
        -:  642:    
    #####:  643:    return -1;
       27:  644:}
        -:  645:
        -:  646:
        -:  647:int my_CouncilRoom(int handPos, int currentPlayer, struct gameState *state)
        -:  648:{
        -:  649:    int i;
        -:  650:    
        -:  651:    //+4 Cards
    #####:  652:    for (i = 0; i < 4; i++)
        -:  653:    {
    #####:  654:        drawCard(currentPlayer, state);
    #####:  655:    }
        -:  656:    
        -:  657:    //+1 Buy
    #####:  658:    state->numBuys++;
        -:  659:    
        -:  660:    //Each other player draws a card
    #####:  661:    for (i = 0; i < state->numPlayers; i++)
        -:  662:    {
    #####:  663:        if (i != currentPlayer)
        -:  664:        {
    #####:  665:            drawCard(i, state);
    #####:  666:        }
    #####:  667:    }
        -:  668:    
        -:  669:    //put played card in played card pile
    #####:  670:    discardCard(handPos, currentPlayer, state, 0);
        -:  671:    
    #####:  672:    return 0;
        -:  673:}
        -:  674:
        -:  675:int my_Smithy(int handPos, int currentPlayer, struct gameState *state)
        -:  676:{
        -:  677:    int i;
        -:  678:    
        -:  679:    //+3 Cards
        6:  680:    for (i = 1; i < 3; i++) //0,3,++
        -:  681:    {
        2:  682:        drawCard(currentPlayer, state);
        2:  683:    }
        -:  684:    
        -:  685:    //discard card from hand
        1:  686:    discardCard(handPos, currentPlayer, state, 0);
        -:  687:    
        1:  688:    return 0;
        -:  689:}
        -:  690:
        -:  691:int my_Village(int handPos, int currentPlayer, struct gameState *state)
        -:  692:{
        -:  693:    //+1 Card
        2:  694:    drawCard(currentPlayer, state);
        -:  695:    
        -:  696:    //+2 Actions
        2:  697:    state->numActions = state->numActions + 1; //2
        -:  698:    
        -:  699:    //discard played card from hand
        2:  700:    discardCard(currentPlayer, handPos, state, 0);
        -:  701:    
        2:  702:    return 0;
        -:  703:}
        -:  704:
        -:  705:int my_Steward(int handPos, int currentPlayer, int choice1, int choice2, int choice3, struct gameState *state)
        -:  706:{
    #####:  707:    if (choice1 == 1)
        -:  708:    {
        -:  709:        //+2 cards
    #####:  710:        drawCard(currentPlayer, state);
    #####:  711:        drawCard(currentPlayer, state);
    #####:  712:    }
    #####:  713:    else if (choice1 == 2)
        -:  714:    {
        -:  715:        //+2 coins
    #####:  716:        state->coins = state->coins + 2;
    #####:  717:    }
        -:  718:    else
        -:  719:    {
        -:  720:        //trash 2 cards in hand
    #####:  721:        discardCard(choice2, currentPlayer, state, 1);
    #####:  722:        discardCard(choice3, currentPlayer, state, 1);
        -:  723:    }
        -:  724:    
        -:  725:    //discard card from hand
    #####:  726:    discardCard(handPos, currentPlayer, state, 0);
        -:  727:    
    #####:  728:    return 0;
        -:  729:}
        -:  730:
        -:  731:int my_Salvager(int handPos, int currentPlayer, int choice1, struct gameState *state)
        -:  732:{
        -:  733:    //+1 buy
    #####:  734:    state->numBuys++;
        -:  735:    
    #####:  736:    if (choice1)
        -:  737:    {
        -:  738:        //gain coins equal to trashed card
    #####:  739:        state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  740:        //trash card
    #####:  741:        discardCard(choice1, currentPlayer, state, 1);
    #####:  742:    }
        -:  743:    
        -:  744:    //discard card
    #####:  745:    discardCard(handPos, currentPlayer, state, 0);
        -:  746:    
    #####:  747:    return 0;
        -:  748:}
        -:  749:
        -:  750:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  751:{
        -:  752:    int i;
        -:  753:    int j;
        -:  754:    int k;
        -:  755:    int x;
        -:  756:    int index;
        3:  757:    int currentPlayer = whoseTurn(state);
        3:  758:    int nextPlayer = currentPlayer + 1;
        -:  759:    
        3:  760:    int tributeRevealedCards[2] = {-1, -1};
        -:  761:    int temphand[MAX_HAND];// moved above the if statement
        3:  762:    int drawntreasure=0;
        -:  763:    int cardDrawn;
        3:  764:    int z = 0;// this is the counter for the temp hand
        3:  765:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  766:        nextPlayer = 0;
    #####:  767:    }
        -:  768:    
        -:  769:    
        -:  770:    //uses switch to select card and perform actions
        3:  771:    switch( card )
        -:  772:    {
        -:  773:        case council_room: //#1
    #####:  774:            return my_CouncilRoom(handPos, currentPlayer, state);
        -:  775:
        -:  776:        case smithy: //#2
        1:  777:            return my_Smithy(handPos, currentPlayer, state);
        -:  778:            
        -:  779:        case village: //#3
        2:  780:            return my_Village(handPos, currentPlayer, state);
        -:  781:
        -:  782:        case steward: //#4
    #####:  783:            return my_Steward(handPos, currentPlayer, choice1, choice2, choice3, state);
        -:  784:
        -:  785:        case salvager: //#5
    #####:  786:            return my_Salvager(handPos, currentPlayer, choice1, state);
        -:  787:
        -:  788:
        -:  789:
        -:  790:        case adventurer:
    #####:  791:            while(drawntreasure<2){
    #####:  792:                if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  793:                    shuffle(currentPlayer, state);
    #####:  794:                }
    #####:  795:                drawCard(currentPlayer, state);
    #####:  796:                cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  797:                if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  798:                    drawntreasure++;
        -:  799:                else{
    #####:  800:                    temphand[z]=cardDrawn;
    #####:  801:                    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  802:                    z++;
        -:  803:                }
        -:  804:            }
    #####:  805:            while(z-1>=0){
    #####:  806:                state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  807:                z=z-1;
        -:  808:            }
    #####:  809:            return 0;
        -:  810:                        
        -:  811:        case feast:
        -:  812:            //gain card with cost up to 5
        -:  813:            //Backup hand
    #####:  814:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  815:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  816:                state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  817:            }
        -:  818:            //Backup hand
        -:  819:            
        -:  820:            //Update Coins for Buy
    #####:  821:            updateCoins(currentPlayer, state, 5);
    #####:  822:            x = 1;//Condition to loop on
    #####:  823:            while( x == 1) {//Buy one card
    #####:  824:                if (supplyCount(choice1, state) <= 0){
        -:  825:                    if (DEBUG)
        -:  826:                        printf("None of that card left, sorry!\n");
        -:  827:                    
        -:  828:                    if (DEBUG){
        -:  829:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  830:                    }
    #####:  831:                }
    #####:  832:                else if (state->coins < getCost(choice1)){
    #####:  833:                    printf("That card is too expensive!\n");
        -:  834:                    
        -:  835:                    if (DEBUG){
        -:  836:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  837:                    }
    #####:  838:                }
        -:  839:                else{
        -:  840:                    
        -:  841:                    if (DEBUG){
        -:  842:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  843:                    }
        -:  844:                    
    #####:  845:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  846:                    x = 0;//No more buying cards
        -:  847:                    
        -:  848:                    if (DEBUG){
        -:  849:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  850:                    }
        -:  851:                    
        -:  852:                }
        -:  853:            }
        -:  854:            
        -:  855:            //Reset Hand
    #####:  856:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  857:                state->hand[currentPlayer][i] = temphand[i];
    #####:  858:                temphand[i] = -1;
    #####:  859:            }
        -:  860:            //Reset Hand
        -:  861:            
    #####:  862:            return 0;
        -:  863:            
        -:  864:        case gardens:
    #####:  865:            return -1;
        -:  866:            
        -:  867:        case mine:
    #####:  868:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  869:            
    #####:  870:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  871:            {
    #####:  872:                return -1;
        -:  873:            }
        -:  874:            
    #####:  875:            if (choice2 > treasure_map || choice2 < curse)
        -:  876:            {
    #####:  877:                return -1;
        -:  878:            }
        -:  879:            
    #####:  880:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  881:            {
    #####:  882:                return -1;
        -:  883:            }
        -:  884:            
    #####:  885:            gainCard(choice2, state, 2, currentPlayer);
        -:  886:            
        -:  887:            //discard card from hand
    #####:  888:            discardCard(handPos, currentPlayer, state, 0);
        -:  889:            
        -:  890:            //discard trashed card
    #####:  891:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  892:            {
    #####:  893:                if (state->hand[currentPlayer][i] == j)
        -:  894:                {
    #####:  895:                    discardCard(i, currentPlayer, state, 0);
    #####:  896:                    break;
        -:  897:                }
    #####:  898:            }
        -:  899:            
    #####:  900:            return 0;
        -:  901:            
        -:  902:        case remodel:
    #####:  903:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  904:            
    #####:  905:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  906:            {
    #####:  907:                return -1;
        -:  908:            }
        -:  909:            
    #####:  910:            gainCard(choice2, state, 0, currentPlayer);
        -:  911:            
        -:  912:            //discard card from hand
    #####:  913:            discardCard(handPos, currentPlayer, state, 0);
        -:  914:            
        -:  915:            //discard trashed card
    #####:  916:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  917:            {
    #####:  918:                if (state->hand[currentPlayer][i] == j)
        -:  919:                {
    #####:  920:                    discardCard(i, currentPlayer, state, 0);
    #####:  921:                    break;
        -:  922:                }
    #####:  923:            }
        -:  924:            
        -:  925:            
    #####:  926:            return 0;
        -:  927:            
        -:  928:
        -:  929:            
        -:  930:        case baron:
    #####:  931:            state->numBuys++;//Increase buys by 1!
    #####:  932:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  933:                int p = 0;//Iterator for hand!
    #####:  934:                int card_not_discarded = 1;//Flag for discard set!
    #####:  935:                while(card_not_discarded){
    #####:  936:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  937:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  938:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  939:                        state->discardCount[currentPlayer]++;
    #####:  940:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  941:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  942:                        }
    #####:  943:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  944:                        state->handCount[currentPlayer]--;
    #####:  945:                        card_not_discarded = 0;//Exit the loop
    #####:  946:                    }
    #####:  947:                    else if (p > state->handCount[currentPlayer]){
        -:  948:                        if(DEBUG) {
        -:  949:                            printf("No estate cards in your hand, invalid choice\n");
        -:  950:                            printf("Must gain an estate if there are any\n");
        -:  951:                        }
    #####:  952:                        if (supplyCount(estate, state) > 0){
    #####:  953:                            gainCard(estate, state, 0, currentPlayer);
    #####:  954:                            state->supplyCount[estate]--;//Decrement estates
    #####:  955:                            if (supplyCount(estate, state) == 0){
    #####:  956:                                isGameOver(state);
    #####:  957:                            }
    #####:  958:                        }
    #####:  959:                        card_not_discarded = 0;//Exit the loop
    #####:  960:                    }
        -:  961:                    
        -:  962:                    else{
    #####:  963:                        p++;//Next card
        -:  964:                    }
        -:  965:                }
    #####:  966:            }
        -:  967:            
        -:  968:            else{
    #####:  969:                if (supplyCount(estate, state) > 0){
    #####:  970:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  971:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  972:                    if (supplyCount(estate, state) == 0){
    #####:  973:                        isGameOver(state);
    #####:  974:                    }
    #####:  975:                }
        -:  976:            }
        -:  977:            
        -:  978:            
    #####:  979:            return 0;
        -:  980:            
        -:  981:        case great_hall:
        -:  982:            //+1 Card
    #####:  983:            drawCard(currentPlayer, state);
        -:  984:            
        -:  985:            //+1 Actions
    #####:  986:            state->numActions++;
        -:  987:            
        -:  988:            //discard card from hand
    #####:  989:            discardCard(handPos, currentPlayer, state, 0);
    #####:  990:            return 0;
        -:  991:            
        -:  992:        case minion:
        -:  993:            //+1 action
    #####:  994:            state->numActions++;
        -:  995:            
        -:  996:            //discard card from hand
    #####:  997:            discardCard(handPos, currentPlayer, state, 0);
        -:  998:            
    #####:  999:            if (choice1)    //+2 coins
        -: 1000:            {
    #####: 1001:                state->coins = state->coins + 2;
    #####: 1002:            }
        -: 1003:            
    #####: 1004:            else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1005:            {
        -: 1006:                //discard hand
    #####: 1007:                while(numHandCards(state) > 0)
        -: 1008:                {
    #####: 1009:                    discardCard(handPos, currentPlayer, state, 0);
        -: 1010:                }
        -: 1011:                
        -: 1012:                //draw 4
    #####: 1013:                for (i = 0; i < 4; i++)
        -: 1014:                {
    #####: 1015:                    drawCard(currentPlayer, state);
    #####: 1016:                }
        -: 1017:                
        -: 1018:                //other players discard hand and redraw if hand size > 4
    #####: 1019:                for (i = 0; i < state->numPlayers; i++)
        -: 1020:                {
    #####: 1021:                    if (i != currentPlayer)
        -: 1022:                    {
    #####: 1023:                        if ( state->handCount[i] > 4 )
        -: 1024:                        {
        -: 1025:                            //discard hand
    #####: 1026:                            while( state->handCount[i] > 0 )
        -: 1027:                            {
    #####: 1028:                                discardCard(handPos, i, state, 0);
        -: 1029:                            }
        -: 1030:                            
        -: 1031:                            //draw 4
    #####: 1032:                            for (j = 0; j < 4; j++)
        -: 1033:                            {
    #####: 1034:                                drawCard(i, state);
    #####: 1035:                            }
    #####: 1036:                        }
    #####: 1037:                    }
    #####: 1038:                }
        -: 1039:                
    #####: 1040:            }
    #####: 1041:            return 0;
        -: 1042:            
        -: 1043:        case tribute:
    #####: 1044:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1045:                if (state->deckCount[nextPlayer] > 0){
    #####: 1046:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1047:                    state->deckCount[nextPlayer]--;
    #####: 1048:                }
    #####: 1049:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1050:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1051:                    state->discardCount[nextPlayer]--;
    #####: 1052:                }
        -: 1053:                else{
        -: 1054:                    //No Card to Reveal
        -: 1055:                    if (DEBUG){
        -: 1056:                        printf("No cards to reveal\n");
        -: 1057:                    }
        -: 1058:                }
    #####: 1059:            }
        -: 1060:            
        -: 1061:            else{
    #####: 1062:                if (state->deckCount[nextPlayer] == 0){
    #####: 1063:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1064:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1065:                        state->deckCount[nextPlayer]++;
    #####: 1066:                        state->discard[nextPlayer][i] = -1;
    #####: 1067:                        state->discardCount[nextPlayer]--;
    #####: 1068:                    }
        -: 1069:                    
    #####: 1070:                    shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1071:                }
    #####: 1072:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1073:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1074:                state->deckCount[nextPlayer]--;
    #####: 1075:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1076:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1077:                state->deckCount[nextPlayer]--;
        -: 1078:            }
        -: 1079:            
    #####: 1080:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1081:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1082:                state->playedCardCount++;
    #####: 1083:                tributeRevealedCards[1] = -1;
    #####: 1084:            }
        -: 1085:            
    #####: 1086:            for (i = 0; i <= 2; i ++){
    #####: 1087:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1088:                    state->coins += 2;
    #####: 1089:                }
        -: 1090:                
    #####: 1091:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1092:                    drawCard(currentPlayer, state);
    #####: 1093:                    drawCard(currentPlayer, state);
    #####: 1094:                }
        -: 1095:                else{//Action Card
    #####: 1096:                    state->numActions = state->numActions + 2;
        -: 1097:                }
    #####: 1098:            }
        -: 1099:            
    #####: 1100:            return 0;
        -: 1101:            
        -: 1102:        case ambassador:
    #####: 1103:            j = 0;    //used to check if player has enough cards to discard
        -: 1104:            
    #####: 1105:            if (choice2 > 2 || choice2 < 0)
        -: 1106:            {
    #####: 1107:                return -1;        
        -: 1108:            }
        -: 1109:            
    #####: 1110:            if (choice1 == handPos)
        -: 1111:            {
    #####: 1112:                return -1;
        -: 1113:            }
        -: 1114:            
    #####: 1115:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1116:            {
    #####: 1117:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1118:                {
    #####: 1119:                    j++;
    #####: 1120:                }
    #####: 1121:            }
    #####: 1122:            if (j < choice2)
        -: 1123:            {
    #####: 1124:                return -1;        
        -: 1125:            }
        -: 1126:            
        -: 1127:            if (DEBUG) 
        -: 1128:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1129:            
        -: 1130:            //increase supply count for choosen card by amount being discarded
    #####: 1131:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1132:            
        -: 1133:            //each other player gains a copy of revealed card
    #####: 1134:            for (i = 0; i < state->numPlayers; i++)
        -: 1135:            {
    #####: 1136:                if (i != currentPlayer)
        -: 1137:                {
    #####: 1138:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1139:                }
    #####: 1140:            }
        -: 1141:            
        -: 1142:            //discard played card from hand
    #####: 1143:            discardCard(handPos, currentPlayer, state, 0);      
        -: 1144:            
        -: 1145:            //trash copies of cards returned to supply
    #####: 1146:            for (j = 0; j < choice2; j++)
        -: 1147:            {
    #####: 1148:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1149:                {
    #####: 1150:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1151:                    {
    #####: 1152:                        discardCard(i, currentPlayer, state, 1);
    #####: 1153:                        break;
        -: 1154:                    }
    #####: 1155:                }
    #####: 1156:            }     
        -: 1157:            
    #####: 1158:            return 0;
        -: 1159:            
        -: 1160:        case cutpurse:
        -: 1161:            
    #####: 1162:            updateCoins(currentPlayer, state, 2);
    #####: 1163:            for (i = 0; i < state->numPlayers; i++)
        -: 1164:            {
    #####: 1165:                if (i != currentPlayer)
        -: 1166:                {
    #####: 1167:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1168:                    {
    #####: 1169:                        if (state->hand[i][j] == copper)
        -: 1170:                        {
    #####: 1171:                            discardCard(j, i, state, 0);
    #####: 1172:                            break;
        -: 1173:                        }
    #####: 1174:                        if (j == state->handCount[i])
        -: 1175:                        {
    #####: 1176:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1177:                            {
        -: 1178:                                if (DEBUG)
        -: 1179:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1180:                            } 
    #####: 1181:                            break;
        -: 1182:                        }   
    #####: 1183:                    }
        -: 1184:                    
    #####: 1185:                }
        -: 1186:                
    #####: 1187:            }       
        -: 1188:            
        -: 1189:            //discard played card from hand
    #####: 1190:            discardCard(handPos, currentPlayer, state, 0);      
        -: 1191:            
    #####: 1192:            return 0;
        -: 1193:            
        -: 1194:            
        -: 1195:        case embargo: 
        -: 1196:            //+2 Coins
    #####: 1197:            state->coins = state->coins + 2;
        -: 1198:            
        -: 1199:            //see if selected pile is in play
    #####: 1200:            if ( state->supplyCount[choice1] == -1 )
        -: 1201:            {
    #####: 1202:                return -1;
        -: 1203:            }
        -: 1204:            
        -: 1205:            //add embargo token to selected supply pile
    #####: 1206:            state->embargoTokens[choice1]++;
        -: 1207:            
        -: 1208:            //trash card
    #####: 1209:            discardCard(handPos, currentPlayer, state, 1);    
    #####: 1210:            return 0;
        -: 1211:            
        -: 1212:        case outpost:
        -: 1213:            //set outpost flag
    #####: 1214:            state->outpostPlayed++;
        -: 1215:            
        -: 1216:            //discard card
    #####: 1217:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1218:            return 0;
        -: 1219:            
        -: 1220:            
        -: 1221:        case sea_hag:
    #####: 1222:            for (i = 0; i < state->numPlayers; i++){
    #####: 1223:                if (i != currentPlayer){
    #####: 1224:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1225:                    state->discardCount[i]++;
    #####: 1226:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1227:                }
    #####: 1228:            }
    #####: 1229:            return 0;
        -: 1230:            
        -: 1231:        case treasure_map:
        -: 1232:            //search hand for another treasure_map
    #####: 1233:            index = -1;
    #####: 1234:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1235:            {
    #####: 1236:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1237:                {
    #####: 1238:                    index = i;
    #####: 1239:                    break;
        -: 1240:                }
    #####: 1241:            }
    #####: 1242:            if (index > -1)
        -: 1243:            {
        -: 1244:                //trash both treasure cards
    #####: 1245:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1246:                discardCard(index, currentPlayer, state, 1);
        -: 1247:                
        -: 1248:                //gain 4 Gold cards
    #####: 1249:                for (i = 0; i < 4; i++)
        -: 1250:                {
    #####: 1251:                    gainCard(gold, state, 1, currentPlayer);
    #####: 1252:                }
        -: 1253:                
        -: 1254:                //return success
    #####: 1255:                return 1;
        -: 1256:            }
        -: 1257:            
        -: 1258:            //no second treasure_map found in hand
    #####: 1259:            return -1;
        -: 1260:    }
        -: 1261:    
    #####: 1262:    return -1;
        3: 1263:}
        -: 1264:
        -: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:    
        -: 1268:    //if card is not trashed, added to Played pile 
        3: 1269:    if (trashFlag < 1)
        -: 1270:    {
        -: 1271:        //add card to played pile
        3: 1272:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1273:        state->playedCardCount++;
        3: 1274:    }
        -: 1275:    
        -: 1276:    //set played card to -1
        3: 1277:    state->hand[currentPlayer][handPos] = -1;
        -: 1278:    
        -: 1279:    //remove card from player's hand
        3: 1280:    if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
        -: 1281:    {
        -: 1282:        //reduce number of cards in hand
    #####: 1283:        state->handCount[currentPlayer]--;
    #####: 1284:    }
        3: 1285:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1286:    {
        -: 1287:        //reduce number of cards in hand
    #####: 1288:        state->handCount[currentPlayer]--;
    #####: 1289:    }
        -: 1290:    else  
        -: 1291:    {
        -: 1292:        //replace discarded card with last card in hand
        3: 1293:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:        //set last card to -1
        3: 1295:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:        //reduce number of cards in hand
        3: 1297:        state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:    
        3: 1300:    return 0;
        -: 1301:}
        -: 1302:
        -: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:    //Note: supplyPos is enum of choosen card
        -: 1306:    
        -: 1307:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1308:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1309:    {
    #####: 1310:        return -1;
        -: 1311:    }
        -: 1312:    
        -: 1313:    //added card for [whoseTurn] current player:
        -: 1314:    // toFlag = 0 : add to discard
        -: 1315:    // toFlag = 1 : add to deck
        -: 1316:    // toFlag = 2 : add to hand
        -: 1317:    
    #####: 1318:    if (toFlag == 1)
        -: 1319:    {
    #####: 1320:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1321:        state->deckCount[player]++;
    #####: 1322:    }
    #####: 1323:    else if (toFlag == 2)
        -: 1324:    {
    #####: 1325:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1326:        state->handCount[player]++;
    #####: 1327:    }
        -: 1328:    else
        -: 1329:    {
    #####: 1330:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1331:        state->discardCount[player]++;
        -: 1332:    }
        -: 1333:    
        -: 1334:    //decrease number in supply pile
    #####: 1335:    state->supplyCount[supplyPos]--;
        -: 1336:    
    #####: 1337:    return 0;
    #####: 1338:}
        -: 1339:
        -: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:    int i;
        -: 1343:    
        -: 1344:    //reset coin count
        8: 1345:    state->coins = 0;
        -: 1346:    
        -: 1347:    //add coins for each Treasure card in player's hand
       96: 1348:    for (i = 0; i < state->handCount[player]; i++)
        -: 1349:    {
       40: 1350:        if (state->hand[player][i] == copper)
        -: 1351:        {
       32: 1352:            state->coins += 1;
       32: 1353:        }
        8: 1354:        else if (state->hand[player][i] == silver)
        -: 1355:        {
    #####: 1356:            state->coins += 2;
    #####: 1357:        }
        8: 1358:        else if (state->hand[player][i] == gold)
        -: 1359:        {
    #####: 1360:            state->coins += 3;
    #####: 1361:        } 
       40: 1362:    } 
        -: 1363:    
        -: 1364:    //add bonus
        8: 1365:    state->coins += bonus;
        -: 1366:    
        8: 1367:    return 0;
        -: 1368:}

**************** Unit Test Result *****************
**             Unit Test 1: getCost()            **
**                    Passed                     **
********************** End ************************


**************** Unit Test Result *****************
**             Unit Test 2: fullDeckCount()      **
**                    Passed                     **
********************** End ************************


**************** Unit Test Result *****************
**             Unit Test 3: drawCard()           **
**                    Passed                     **
********************** End ************************


**************** Unit Test Result *****************
**             Unit Test 4: whoseTurn()          **
**                    Passed                     **
********************** End ************************


**************** Card Test Result *****************
**             Card Test 1: smithy               **
**                    Failed                     **
********************** End ************************


**************** Card Test Result *****************
**             Card Test 2: council_room         **
**                    Failed                     **
********************** End ************************


**************** Card Test Result *****************
**             Card Test 3: village              **
**                    Failed                     **
********************** End ************************


**************** Card Test Result *****************
**             Card Test 4: salvager             **
**                    Failed                     **
********************** End ************************

File 'dominion.c'
Lines executed:27.48% of 644
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      224:    9:    if (*(int*)a > *(int*)b)
    #####:   10:        return 1;
      224:   11:    if (*(int*)a < *(int*)b)
       80:   12:        return -1;
      144:   13:    return 0;
      224:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;
        -:   43:    //set up random number generator
        8:   44:    SelectStream(1);
        8:   45:    PutSeed((long)randomSeed);
        -:   46:    
        -:   47:    //check number of players
       16:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:    
        -:   53:    //set number of players
        8:   54:    state->numPlayers = numPlayers;
        -:   55:    
        -:   56:    //check selected kingdom cards are different
      176:   57:    for (i = 0; i < 10; i++)
        -:   58:    {
     1760:   59:        for (j = 0; j < 10; j++)
        -:   60:        {
     1520:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
      800:   65:        }
       80:   66:    }
        -:   67:    
        -:   68:    
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:    
        -:   72:    //set number of Curse cards
        8:   73:    if (numPlayers == 2)
        -:   74:    {
        8:   75:        state->supplyCount[curse] = 10;
        8:   76:    }
    #####:   77:    else if (numPlayers == 3)
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:    
        -:   86:    //set number of Victory cards
        8:   87:    if (numPlayers == 2)
        -:   88:    {
        8:   89:        state->supplyCount[estate] = 8;
        8:   90:        state->supplyCount[duchy] = 8;
        8:   91:        state->supplyCount[province] = 8;
        8:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:    
        -:  100:    //set number of Treasure cards
        8:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:    state->supplyCount[silver] = 40;
        8:  103:    state->supplyCount[gold] = 30;
        -:  104:    
        -:  105:    //set number of Kingdom cards
      336:  106:    for (i = adventurer; i <= treasure_map; i++)        //loop all cards
        -:  107:    {
     2640:  108:        for (j = 0; j < 10; j++)              //loop chosen cards
        -:  109:        {
     1240:  110:            if (kingdomCards[j] == i)
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
      160:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:                {
        8:  115:                    if (numPlayers == 2){
        8:  116:                        state->supplyCount[i] = 8;
        8:  117:                    }
    #####:  118:                    else{ state->supplyCount[i] = 12; }
        8:  119:                }
        -:  120:                else
        -:  121:                {
       72:  122:                    state->supplyCount[i] = 10;
        -:  123:                }
       80:  124:                break;
        -:  125:            }
        -:  126:            else    //card is not in the set choosen for the game
        -:  127:            {
     1160:  128:                state->supplyCount[i] = -1;
        -:  129:            }
     1160:  130:        }
        -:  131:        
      160:  132:    }
        -:  133:    
        -:  134:    ////////////////////////
        -:  135:    //supply intilization complete
        -:  136:    
        -:  137:    //set player decks
       48:  138:    for (i = 0; i < numPlayers; i++)
        -:  139:    {
       16:  140:        state->deckCount[i] = 0;
      128:  141:        for (j = 0; j < 3; j++)
        -:  142:        {
       48:  143:            state->deck[i][j] = estate;
       48:  144:            state->deckCount[i]++;
       48:  145:        }
      256:  146:        for (j = 3; j < 10; j++)
        -:  147:        {
      112:  148:            state->deck[i][j] = copper;
      112:  149:            state->deckCount[i]++;
      112:  150:        }
       16:  151:    }
        -:  152:    
        -:  153:    //shuffle player decks
       48:  154:    for (i = 0; i < numPlayers; i++)
        -:  155:    {
       16:  156:        if ( shuffle(i, state) < 0 )
        -:  157:        {
    #####:  158:            return -1;
        -:  159:        }
       16:  160:    }
        -:  161:    
        -:  162:    //draw player hands
       48:  163:    for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:        //initialize hand size to zero
       16:  166:        state->handCount[i] = 0;
       16:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //  {
        -:  171:        //    drawCard(i, state);
        -:  172:        //  }
       16:  173:    }
        -:  174:    
        -:  175:    //set embargo tokens to 0 for all supply piles
      448:  176:    for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      216:  178:        state->embargoTokens[i] = 0;
      216:  179:    }
        -:  180:    
        -:  181:    //initialize first player's turn
        8:  182:    state->outpostPlayed = 0;
        8:  183:    state->phase = 0;
        8:  184:    state->numActions = 1;
        8:  185:    state->numBuys = 1;
        8:  186:    state->playedCardCount = 0;
        8:  187:    state->whoseTurn = 0;
        8:  188:    state->handCount[state->whoseTurn] = 0;
        -:  189:    //int it; move to top
        -:  190:    
        -:  191:    //Moved draw cards to here, only drawing at the start of a turn
       96:  192:    for (it = 0; it < 5; it++){
       40:  193:        drawCard(state->whoseTurn, state);
       40:  194:    }
        -:  195:    
        8:  196:    updateCoins(state->whoseTurn, state, 0);
        -:  197:    
        8:  198:    return 0;
        8:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:    
        -:  203:    
        -:  204:    int newDeck[MAX_DECK];
       16:  205:    int newDeckPos = 0;
        -:  206:    int card;
        -:  207:    int i;
        -:  208:    
       16:  209:    if (state->deckCount[player] < 1)
    #####:  210:        return -1;
       16:  211:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:    
      352:  214:    while (state->deckCount[player] > 0) {
      160:  215:        card = floor(Random() * state->deckCount[player]);
      160:  216:        newDeck[newDeckPos] = state->deck[player][card];
      160:  217:        newDeckPos++;
     1072:  218:        for (i = card; i < state->deckCount[player]-1; i++) {
      376:  219:            state->deck[player][i] = state->deck[player][i+1];
      376:  220:        }
      160:  221:        state->deckCount[player]--;
        -:  222:    }
      352:  223:    for (i = 0; i < newDeckPos; i++) {
      160:  224:        state->deck[player][i] = newDeck[i];
      160:  225:        state->deckCount[player]++;
      160:  226:    }
        -:  227:    
       16:  228:    return 0;
       16:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:    int card;
    #####:  234:    int coin_bonus = 0;     //tracks coins gain from actions
        -:  235:    
        -:  236:    //check if it is the right phase
    #####:  237:    if (state->phase != 0)
        -:  238:    {
    #####:  239:        return -1;
        -:  240:    }
        -:  241:    
        -:  242:    //check if player has enough actions
    #####:  243:    if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:        return -1;
        -:  246:    }
        -:  247:    
        -:  248:    //get card played
    #####:  249:    card = handCard(handPos, state);
        -:  250:    
        -:  251:    //check if selected card is an action
    #####:  252:    if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:        return -1;
        -:  255:    }
        -:  256:    
        -:  257:    //play card
    #####:  258:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:        return -1;
        -:  261:    }
        -:  262:    
        -:  263:    //reduce number of actions
    #####:  264:    state->numActions--;
        -:  265:    
        -:  266:    //update coins (Treasure cards may be added with card draws)
    #####:  267:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:    
    #####:  269:    return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:    int who;
        -:  274:    if (DEBUG){
        -:  275:        printf("Entering buyCard...\n");
        -:  276:    }
        -:  277:    
        -:  278:    // I don't know what to do about the phase thing.
        -:  279:    
    #####:  280:    who = state->whoseTurn;
        -:  281:    
    #####:  282:    if (state->numBuys < 1){
        -:  283:        if (DEBUG)
        -:  284:            printf("You do not have any buys left\n");
    #####:  285:        return -1;
    #####:  286:    } else if (supplyCount(supplyPos, state) <1){
        -:  287:        if (DEBUG)
        -:  288:            printf("There are not any of that type of card left\n");
    #####:  289:        return -1;
    #####:  290:    } else if (state->coins < getCost(supplyPos)){
        -:  291:        if (DEBUG)
        -:  292:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:        return -1;
        -:  294:    } else {
    #####:  295:        state->phase=1;
        -:  296:        //state->supplyCount[supplyPos]--;
    #####:  297:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:        
    #####:  299:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:        state->numBuys--;
        -:  301:        if (DEBUG)
        -:  302:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:    }
        -:  304:    
        -:  305:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:    //state->discardCount[who]++;
        -:  307:    
    #####:  308:    return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
        7:  312:    return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:    int currentPlayer = whoseTurn(state);
    #####:  317:    return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:    return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:    int i;
        1:  326:    int count = 0;
        -:  327:    
       12:  328:    for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
        5:  330:        if (state->deck[player][i] == card) count++;
        5:  331:    }
        -:  332:    
       12:  333:    for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
        5:  335:        if (state->hand[player][i] == card) count++;
        5:  336:    }
        -:  337:    
        2:  338:    for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:        if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:    
        1:  343:    return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
       11:  347:    return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:    int k;
        -:  352:    int i;
    #####:  353:    int currentPlayer = whoseTurn(state);
        -:  354:    
        -:  355:    //Discard hand
    #####:  356:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:        state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:    }
    #####:  360:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:    //Code for determining the player
    #####:  363:    if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:    }
        -:  366:    else{
    #####:  367:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:    }
        -:  369:    
    #####:  370:    state->outpostPlayed = 0;
    #####:  371:    state->phase = 0;
    #####:  372:    state->numActions = 1;
    #####:  373:    state->coins = 0;
    #####:  374:    state->numBuys = 1;
    #####:  375:    state->playedCardCount = 0;
    #####:  376:    state->handCount[state->whoseTurn] = 0;
        -:  377:    
        -:  378:    //int k; move to top
        -:  379:    //Next player draws hand
    #####:  380:    for (k = 0; k < 5; k++){
    #####:  381:        drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:    }
        -:  383:    
        -:  384:    //Update money
    #####:  385:    updateCoins(state->whoseTurn, state , 0);
        -:  386:    
    #####:  387:    return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:    int i;
        -:  392:    int j;
        -:  393:    
        -:  394:    //if stack of Province cards is empty, the game ends
    #####:  395:    if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:        return 1;
        -:  398:    }
        -:  399:    
        -:  400:    //if three supply pile are at 0, the game ends
    #####:  401:    j = 0;
    #####:  402:    for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:        if (state->supplyCount[i] == 0)
        -:  405:        {
    #####:  406:            j++;
    #####:  407:        }
    #####:  408:    }
    #####:  409:    if ( j >= 3)
        -:  410:    {
    #####:  411:        return 1;
        -:  412:    }
        -:  413:    
    #####:  414:    return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:    
        -:  419:    int i;
    #####:  420:    int score = 0;
        -:  421:    //score from hand
    #####:  422:    for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:    
        -:  432:    //score from discard
    #####:  433:    for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:    
        -:  443:    //score from deck
    #####:  444:    for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:    
    #####:  454:    return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:    int i;
        -:  459:    int j;
        -:  460:    int highScore;
        -:  461:    int currentPlayer;
        -:  462:    
        -:  463:    //get score for each player
    #####:  464:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:        //set unused player scores to -9999
    #####:  467:        if (i >= state->numPlayers)
        -:  468:        {
    #####:  469:            players[i] = -9999;
    #####:  470:        }
        -:  471:        else
        -:  472:        {
    #####:  473:            players[i] = scoreFor (i, state);
        -:  474:        }
    #####:  475:    }
        -:  476:    
        -:  477:    //find highest score
    #####:  478:    j = 0;
    #####:  479:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:        if (players[i] > players[j])
        -:  482:        {
    #####:  483:            j = i;
    #####:  484:        }
    #####:  485:    }
    #####:  486:    highScore = players[j];
        -:  487:    
        -:  488:    //add 1 to players who had less turns
    #####:  489:    currentPlayer = whoseTurn(state);
    #####:  490:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:        if ( players[i] == highScore && i > currentPlayer )
        -:  493:        {
    #####:  494:            players[i]++;
    #####:  495:        }
    #####:  496:    }
        -:  497:    
        -:  498:    //find new highest score
    #####:  499:    j = 0;
    #####:  500:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:        if ( players[i] > players[j] )
        -:  503:        {
    #####:  504:            j = i;
    #####:  505:        }
    #####:  506:    }
    #####:  507:    highScore = players[j];
        -:  508:    
        -:  509:    //set winners in array to 1 and rest to 0
    #####:  510:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:        if ( players[i] == highScore )
        -:  513:        {
    #####:  514:            players[i] = 1;
    #####:  515:        }
        -:  516:        else
        -:  517:        {
    #####:  518:            players[i] = 0;
        -:  519:        }
    #####:  520:    }
        -:  521:    
    #####:  522:    return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{ int count;
        -:  527:    int deckCounter;
       44:  528:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:        
        -:  530:        //Step 1 Shuffle the discard pile back into a deck
        -:  531:        int i;
        -:  532:        //Move discard to deck
    #####:  533:        for (i = 0; i < state->discardCount[player];i++){
    #####:  534:            state->deck[player][i] = state->discard[player][i];
    #####:  535:            state->discard[player][i] = -1;
    #####:  536:        }
        -:  537:        
    #####:  538:        state->deckCount[player] = state->discardCount[player];
    #####:  539:        state->discardCount[player] = 0;//Reset discard
        -:  540:        
        -:  541:        //Shufffle the deck
    #####:  542:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:        
        -:  544:        if (DEBUG){//Debug statements
        -:  545:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:        }
        -:  547:        
    #####:  548:        state->discardCount[player] = 0;
        -:  549:        
        -:  550:        //Step 2 Draw Card
    #####:  551:        count = state->handCount[player];//Get current player's hand count
        -:  552:        
        -:  553:        if (DEBUG){//Debug statements
        -:  554:            printf("Current hand count: %d\n", count);
        -:  555:        }
        -:  556:        
    #####:  557:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:        
    #####:  559:        if (deckCounter == 0)
    #####:  560:            return -1;
        -:  561:        
    #####:  562:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:        state->deckCount[player]--;
    #####:  564:        state->handCount[player]++;//Increment hand count
    #####:  565:    }
        -:  566:    
        -:  567:    else{
       44:  568:        int count = state->handCount[player];//Get current hand count for player
        -:  569:        int deckCounter;
        -:  570:        if (DEBUG){//Debug statements
        -:  571:            printf("Current hand count: %d\n", count);
        -:  572:        }
        -:  573:        
       44:  574:        deckCounter = state->deckCount[player];//Create holder for the deck count
       44:  575:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       44:  576:        state->deckCount[player]--;
       44:  577:        state->handCount[player]++;//Increment hand count
        -:  578:    }
        -:  579:    
       44:  580:    return 0;
       44:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
       27:  585:    switch( cardNumber )
        -:  586:    {
        -:  587:        case curse:
        1:  588:            return 0;
        -:  589:        case estate:
        1:  590:            return 2;
        -:  591:        case duchy:
        1:  592:            return 5;
        -:  593:        case province:
        1:  594:            return 8;
        -:  595:        case copper:
        1:  596:            return 0;
        -:  597:        case silver:
        1:  598:            return 3;
        -:  599:        case gold:
        1:  600:            return 6;
        -:  601:        case adventurer:
        1:  602:            return 6;
        -:  603:        case council_room:
        1:  604:            return 5;
        -:  605:        case feast:
        1:  606:            return 4;
        -:  607:        case gardens:
        1:  608:            return 4;
        -:  609:        case mine:
        1:  610:            return 5;
        -:  611:        case remodel:
        1:  612:            return 4;
        -:  613:        case smithy:
        1:  614:            return 4;
        -:  615:        case village:
        1:  616:            return 3;
        -:  617:        case baron:
        1:  618:            return 4;
        -:  619:        case great_hall:
        1:  620:            return 3;
        -:  621:        case minion:
        1:  622:            return 5;
        -:  623:        case steward:
        1:  624:            return 3;
        -:  625:        case tribute:
        1:  626:            return 5;
        -:  627:        case ambassador:
        1:  628:            return 3;
        -:  629:        case cutpurse:
        1:  630:            return 4;
        -:  631:        case embargo:
        1:  632:            return 2;
        -:  633:        case outpost:
        1:  634:            return 5;
        -:  635:        case salvager:
        1:  636:            return 4;
        -:  637:        case sea_hag:
        1:  638:            return 4;
        -:  639:        case treasure_map:
        1:  640:            return 4;
        -:  641:    }
        -:  642:    
    #####:  643:    return -1;
       27:  644:}
        -:  645:
        -:  646:
        -:  647:int my_CouncilRoom(int handPos, int currentPlayer, struct gameState *state)
        -:  648:{
        -:  649:    int i;
        -:  650:    
        -:  651:    //+4 Cards
    #####:  652:    for (i = 0; i < 4; i++)
        -:  653:    {
    #####:  654:        drawCard(currentPlayer, state);
    #####:  655:    }
        -:  656:    
        -:  657:    //+1 Buy
    #####:  658:    state->numBuys++;
        -:  659:    
        -:  660:    //Each other player draws a card
    #####:  661:    for (i = 0; i < state->numPlayers; i++)
        -:  662:    {
    #####:  663:        if (i != currentPlayer)
        -:  664:        {
    #####:  665:            drawCard(i, state);
    #####:  666:        }
    #####:  667:    }
        -:  668:    
        -:  669:    //put played card in played card pile
    #####:  670:    discardCard(handPos, currentPlayer, state, 0);
        -:  671:    
    #####:  672:    return 0;
        -:  673:}
        -:  674:
        -:  675:int my_Smithy(int handPos, int currentPlayer, struct gameState *state)
        -:  676:{
        -:  677:    int i;
        -:  678:    
        -:  679:    //+3 Cards
        6:  680:    for (i = 1; i < 3; i++) //0,3,++
        -:  681:    {
        2:  682:        drawCard(currentPlayer, state);
        2:  683:    }
        -:  684:    
        -:  685:    //discard card from hand
        1:  686:    discardCard(handPos, currentPlayer, state, 0);
        -:  687:    
        1:  688:    return 0;
        -:  689:}
        -:  690:
        -:  691:int my_Village(int handPos, int currentPlayer, struct gameState *state)
        -:  692:{
        -:  693:    //+1 Card
        2:  694:    drawCard(currentPlayer, state);
        -:  695:    
        -:  696:    //+2 Actions
        2:  697:    state->numActions = state->numActions + 1; //2
        -:  698:    
        -:  699:    //discard played card from hand
        2:  700:    discardCard(currentPlayer, handPos, state, 0);
        -:  701:    
        2:  702:    return 0;
        -:  703:}
        -:  704:
        -:  705:int my_Steward(int handPos, int currentPlayer, int choice1, int choice2, int choice3, struct gameState *state)
        -:  706:{
    #####:  707:    if (choice1 == 1)
        -:  708:    {
        -:  709:        //+2 cards
    #####:  710:        drawCard(currentPlayer, state);
    #####:  711:        drawCard(currentPlayer, state);
    #####:  712:    }
    #####:  713:    else if (choice1 == 2)
        -:  714:    {
        -:  715:        //+2 coins
    #####:  716:        state->coins = state->coins + 2;
    #####:  717:    }
        -:  718:    else
        -:  719:    {
        -:  720:        //trash 2 cards in hand
    #####:  721:        discardCard(choice2, currentPlayer, state, 1);
    #####:  722:        discardCard(choice3, currentPlayer, state, 1);
        -:  723:    }
        -:  724:    
        -:  725:    //discard card from hand
    #####:  726:    discardCard(handPos, currentPlayer, state, 0);
        -:  727:    
    #####:  728:    return 0;
        -:  729:}
        -:  730:
        -:  731:int my_Salvager(int handPos, int currentPlayer, int choice1, struct gameState *state)
        -:  732:{
        -:  733:    //+1 buy
    #####:  734:    state->numBuys++;
        -:  735:    
    #####:  736:    if (choice1)
        -:  737:    {
        -:  738:        //gain coins equal to trashed card
    #####:  739:        state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  740:        //trash card
    #####:  741:        discardCard(choice1, currentPlayer, state, 1);
    #####:  742:    }
        -:  743:    
        -:  744:    //discard card
    #####:  745:    discardCard(handPos, currentPlayer, state, 0);
        -:  746:    
    #####:  747:    return 0;
        -:  748:}
        -:  749:
        -:  750:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  751:{
        -:  752:    int i;
        -:  753:    int j;
        -:  754:    int k;
        -:  755:    int x;
        -:  756:    int index;
        3:  757:    int currentPlayer = whoseTurn(state);
        3:  758:    int nextPlayer = currentPlayer + 1;
        -:  759:    
        3:  760:    int tributeRevealedCards[2] = {-1, -1};
        -:  761:    int temphand[MAX_HAND];// moved above the if statement
        3:  762:    int drawntreasure=0;
        -:  763:    int cardDrawn;
        3:  764:    int z = 0;// this is the counter for the temp hand
        3:  765:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  766:        nextPlayer = 0;
    #####:  767:    }
        -:  768:    
        -:  769:    
        -:  770:    //uses switch to select card and perform actions
        3:  771:    switch( card )
        -:  772:    {
        -:  773:        case council_room: //#1
    #####:  774:            return my_CouncilRoom(handPos, currentPlayer, state);
        -:  775:
        -:  776:        case smithy: //#2
        1:  777:            return my_Smithy(handPos, currentPlayer, state);
        -:  778:            
        -:  779:        case village: //#3
        2:  780:            return my_Village(handPos, currentPlayer, state);
        -:  781:
        -:  782:        case steward: //#4
    #####:  783:            return my_Steward(handPos, currentPlayer, choice1, choice2, choice3, state);
        -:  784:
        -:  785:        case salvager: //#5
    #####:  786:            return my_Salvager(handPos, currentPlayer, choice1, state);
        -:  787:
        -:  788:
        -:  789:
        -:  790:        case adventurer:
    #####:  791:            while(drawntreasure<2){
    #####:  792:                if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  793:                    shuffle(currentPlayer, state);
    #####:  794:                }
    #####:  795:                drawCard(currentPlayer, state);
    #####:  796:                cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  797:                if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  798:                    drawntreasure++;
        -:  799:                else{
    #####:  800:                    temphand[z]=cardDrawn;
    #####:  801:                    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  802:                    z++;
        -:  803:                }
        -:  804:            }
    #####:  805:            while(z-1>=0){
    #####:  806:                state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  807:                z=z-1;
        -:  808:            }
    #####:  809:            return 0;
        -:  810:                        
        -:  811:        case feast:
        -:  812:            //gain card with cost up to 5
        -:  813:            //Backup hand
    #####:  814:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  815:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  816:                state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  817:            }
        -:  818:            //Backup hand
        -:  819:            
        -:  820:            //Update Coins for Buy
    #####:  821:            updateCoins(currentPlayer, state, 5);
    #####:  822:            x = 1;//Condition to loop on
    #####:  823:            while( x == 1) {//Buy one card
    #####:  824:                if (supplyCount(choice1, state) <= 0){
        -:  825:                    if (DEBUG)
        -:  826:                        printf("None of that card left, sorry!\n");
        -:  827:                    
        -:  828:                    if (DEBUG){
        -:  829:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  830:                    }
    #####:  831:                }
    #####:  832:                else if (state->coins < getCost(choice1)){
    #####:  833:                    printf("That card is too expensive!\n");
        -:  834:                    
        -:  835:                    if (DEBUG){
        -:  836:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  837:                    }
    #####:  838:                }
        -:  839:                else{
        -:  840:                    
        -:  841:                    if (DEBUG){
        -:  842:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  843:                    }
        -:  844:                    
    #####:  845:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  846:                    x = 0;//No more buying cards
        -:  847:                    
        -:  848:                    if (DEBUG){
        -:  849:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  850:                    }
        -:  851:                    
        -:  852:                }
        -:  853:            }
        -:  854:            
        -:  855:            //Reset Hand
    #####:  856:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  857:                state->hand[currentPlayer][i] = temphand[i];
    #####:  858:                temphand[i] = -1;
    #####:  859:            }
        -:  860:            //Reset Hand
        -:  861:            
    #####:  862:            return 0;
        -:  863:            
        -:  864:        case gardens:
    #####:  865:            return -1;
        -:  866:            
        -:  867:        case mine:
    #####:  868:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  869:            
    #####:  870:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  871:            {
    #####:  872:                return -1;
        -:  873:            }
        -:  874:            
    #####:  875:            if (choice2 > treasure_map || choice2 < curse)
        -:  876:            {
    #####:  877:                return -1;
        -:  878:            }
        -:  879:            
    #####:  880:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  881:            {
    #####:  882:                return -1;
        -:  883:            }
        -:  884:            
    #####:  885:            gainCard(choice2, state, 2, currentPlayer);
        -:  886:            
        -:  887:            //discard card from hand
    #####:  888:            discardCard(handPos, currentPlayer, state, 0);
        -:  889:            
        -:  890:            //discard trashed card
    #####:  891:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  892:            {
    #####:  893:                if (state->hand[currentPlayer][i] == j)
        -:  894:                {
    #####:  895:                    discardCard(i, currentPlayer, state, 0);
    #####:  896:                    break;
        -:  897:                }
    #####:  898:            }
        -:  899:            
    #####:  900:            return 0;
        -:  901:            
        -:  902:        case remodel:
    #####:  903:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  904:            
    #####:  905:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  906:            {
    #####:  907:                return -1;
        -:  908:            }
        -:  909:            
    #####:  910:            gainCard(choice2, state, 0, currentPlayer);
        -:  911:            
        -:  912:            //discard card from hand
    #####:  913:            discardCard(handPos, currentPlayer, state, 0);
        -:  914:            
        -:  915:            //discard trashed card
    #####:  916:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  917:            {
    #####:  918:                if (state->hand[currentPlayer][i] == j)
        -:  919:                {
    #####:  920:                    discardCard(i, currentPlayer, state, 0);
    #####:  921:                    break;
        -:  922:                }
    #####:  923:            }
        -:  924:            
        -:  925:            
    #####:  926:            return 0;
        -:  927:            
        -:  928:
        -:  929:            
        -:  930:        case baron:
    #####:  931:            state->numBuys++;//Increase buys by 1!
    #####:  932:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  933:                int p = 0;//Iterator for hand!
    #####:  934:                int card_not_discarded = 1;//Flag for discard set!
    #####:  935:                while(card_not_discarded){
    #####:  936:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  937:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  938:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  939:                        state->discardCount[currentPlayer]++;
    #####:  940:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  941:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  942:                        }
    #####:  943:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  944:                        state->handCount[currentPlayer]--;
    #####:  945:                        card_not_discarded = 0;//Exit the loop
    #####:  946:                    }
    #####:  947:                    else if (p > state->handCount[currentPlayer]){
        -:  948:                        if(DEBUG) {
        -:  949:                            printf("No estate cards in your hand, invalid choice\n");
        -:  950:                            printf("Must gain an estate if there are any\n");
        -:  951:                        }
    #####:  952:                        if (supplyCount(estate, state) > 0){
    #####:  953:                            gainCard(estate, state, 0, currentPlayer);
    #####:  954:                            state->supplyCount[estate]--;//Decrement estates
    #####:  955:                            if (supplyCount(estate, state) == 0){
    #####:  956:                                isGameOver(state);
    #####:  957:                            }
    #####:  958:                        }
    #####:  959:                        card_not_discarded = 0;//Exit the loop
    #####:  960:                    }
        -:  961:                    
        -:  962:                    else{
    #####:  963:                        p++;//Next card
        -:  964:                    }
        -:  965:                }
    #####:  966:            }
        -:  967:            
        -:  968:            else{
    #####:  969:                if (supplyCount(estate, state) > 0){
    #####:  970:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  971:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  972:                    if (supplyCount(estate, state) == 0){
    #####:  973:                        isGameOver(state);
    #####:  974:                    }
    #####:  975:                }
        -:  976:            }
        -:  977:            
        -:  978:            
    #####:  979:            return 0;
        -:  980:            
        -:  981:        case great_hall:
        -:  982:            //+1 Card
    #####:  983:            drawCard(currentPlayer, state);
        -:  984:            
        -:  985:            //+1 Actions
    #####:  986:            state->numActions++;
        -:  987:            
        -:  988:            //discard card from hand
    #####:  989:            discardCard(handPos, currentPlayer, state, 0);
    #####:  990:            return 0;
        -:  991:            
        -:  992:        case minion:
        -:  993:            //+1 action
    #####:  994:            state->numActions++;
        -:  995:            
        -:  996:            //discard card from hand
    #####:  997:            discardCard(handPos, currentPlayer, state, 0);
        -:  998:            
    #####:  999:            if (choice1)    //+2 coins
        -: 1000:            {
    #####: 1001:                state->coins = state->coins + 2;
    #####: 1002:            }
        -: 1003:            
    #####: 1004:            else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1005:            {
        -: 1006:                //discard hand
    #####: 1007:                while(numHandCards(state) > 0)
        -: 1008:                {
    #####: 1009:                    discardCard(handPos, currentPlayer, state, 0);
        -: 1010:                }
        -: 1011:                
        -: 1012:                //draw 4
    #####: 1013:                for (i = 0; i < 4; i++)
        -: 1014:                {
    #####: 1015:                    drawCard(currentPlayer, state);
    #####: 1016:                }
        -: 1017:                
        -: 1018:                //other players discard hand and redraw if hand size > 4
    #####: 1019:                for (i = 0; i < state->numPlayers; i++)
        -: 1020:                {
    #####: 1021:                    if (i != currentPlayer)
        -: 1022:                    {
    #####: 1023:                        if ( state->handCount[i] > 4 )
        -: 1024:                        {
        -: 1025:                            //discard hand
    #####: 1026:                            while( state->handCount[i] > 0 )
        -: 1027:                            {
    #####: 1028:                                discardCard(handPos, i, state, 0);
        -: 1029:                            }
        -: 1030:                            
        -: 1031:                            //draw 4
    #####: 1032:                            for (j = 0; j < 4; j++)
        -: 1033:                            {
    #####: 1034:                                drawCard(i, state);
    #####: 1035:                            }
    #####: 1036:                        }
    #####: 1037:                    }
    #####: 1038:                }
        -: 1039:                
    #####: 1040:            }
    #####: 1041:            return 0;
        -: 1042:            
        -: 1043:        case tribute:
    #####: 1044:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1045:                if (state->deckCount[nextPlayer] > 0){
    #####: 1046:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1047:                    state->deckCount[nextPlayer]--;
    #####: 1048:                }
    #####: 1049:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1050:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1051:                    state->discardCount[nextPlayer]--;
    #####: 1052:                }
        -: 1053:                else{
        -: 1054:                    //No Card to Reveal
        -: 1055:                    if (DEBUG){
        -: 1056:                        printf("No cards to reveal\n");
        -: 1057:                    }
        -: 1058:                }
    #####: 1059:            }
        -: 1060:            
        -: 1061:            else{
    #####: 1062:                if (state->deckCount[nextPlayer] == 0){
    #####: 1063:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1064:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1065:                        state->deckCount[nextPlayer]++;
    #####: 1066:                        state->discard[nextPlayer][i] = -1;
    #####: 1067:                        state->discardCount[nextPlayer]--;
    #####: 1068:                    }
        -: 1069:                    
    #####: 1070:                    shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1071:                }
    #####: 1072:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1073:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1074:                state->deckCount[nextPlayer]--;
    #####: 1075:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1076:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1077:                state->deckCount[nextPlayer]--;
        -: 1078:            }
        -: 1079:            
    #####: 1080:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1081:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1082:                state->playedCardCount++;
    #####: 1083:                tributeRevealedCards[1] = -1;
    #####: 1084:            }
        -: 1085:            
    #####: 1086:            for (i = 0; i <= 2; i ++){
    #####: 1087:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1088:                    state->coins += 2;
    #####: 1089:                }
        -: 1090:                
    #####: 1091:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1092:                    drawCard(currentPlayer, state);
    #####: 1093:                    drawCard(currentPlayer, state);
    #####: 1094:                }
        -: 1095:                else{//Action Card
    #####: 1096:                    state->numActions = state->numActions + 2;
        -: 1097:                }
    #####: 1098:            }
        -: 1099:            
    #####: 1100:            return 0;
        -: 1101:            
        -: 1102:        case ambassador:
    #####: 1103:            j = 0;    //used to check if player has enough cards to discard
        -: 1104:            
    #####: 1105:            if (choice2 > 2 || choice2 < 0)
        -: 1106:            {
    #####: 1107:                return -1;        
        -: 1108:            }
        -: 1109:            
    #####: 1110:            if (choice1 == handPos)
        -: 1111:            {
    #####: 1112:                return -1;
        -: 1113:            }
        -: 1114:            
    #####: 1115:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1116:            {
    #####: 1117:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1118:                {
    #####: 1119:                    j++;
    #####: 1120:                }
    #####: 1121:            }
    #####: 1122:            if (j < choice2)
        -: 1123:            {
    #####: 1124:                return -1;        
        -: 1125:            }
        -: 1126:            
        -: 1127:            if (DEBUG) 
        -: 1128:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1129:            
        -: 1130:            //increase supply count for choosen card by amount being discarded
    #####: 1131:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1132:            
        -: 1133:            //each other player gains a copy of revealed card
    #####: 1134:            for (i = 0; i < state->numPlayers; i++)
        -: 1135:            {
    #####: 1136:                if (i != currentPlayer)
        -: 1137:                {
    #####: 1138:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1139:                }
    #####: 1140:            }
        -: 1141:            
        -: 1142:            //discard played card from hand
    #####: 1143:            discardCard(handPos, currentPlayer, state, 0);      
        -: 1144:            
        -: 1145:            //trash copies of cards returned to supply
    #####: 1146:            for (j = 0; j < choice2; j++)
        -: 1147:            {
    #####: 1148:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1149:                {
    #####: 1150:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1151:                    {
    #####: 1152:                        discardCard(i, currentPlayer, state, 1);
    #####: 1153:                        break;
        -: 1154:                    }
    #####: 1155:                }
    #####: 1156:            }     
        -: 1157:            
    #####: 1158:            return 0;
        -: 1159:            
        -: 1160:        case cutpurse:
        -: 1161:            
    #####: 1162:            updateCoins(currentPlayer, state, 2);
    #####: 1163:            for (i = 0; i < state->numPlayers; i++)
        -: 1164:            {
    #####: 1165:                if (i != currentPlayer)
        -: 1166:                {
    #####: 1167:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1168:                    {
    #####: 1169:                        if (state->hand[i][j] == copper)
        -: 1170:                        {
    #####: 1171:                            discardCard(j, i, state, 0);
    #####: 1172:                            break;
        -: 1173:                        }
    #####: 1174:                        if (j == state->handCount[i])
        -: 1175:                        {
    #####: 1176:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1177:                            {
        -: 1178:                                if (DEBUG)
        -: 1179:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1180:                            } 
    #####: 1181:                            break;
        -: 1182:                        }   
    #####: 1183:                    }
        -: 1184:                    
    #####: 1185:                }
        -: 1186:                
    #####: 1187:            }       
        -: 1188:            
        -: 1189:            //discard played card from hand
    #####: 1190:            discardCard(handPos, currentPlayer, state, 0);      
        -: 1191:            
    #####: 1192:            return 0;
        -: 1193:            
        -: 1194:            
        -: 1195:        case embargo: 
        -: 1196:            //+2 Coins
    #####: 1197:            state->coins = state->coins + 2;
        -: 1198:            
        -: 1199:            //see if selected pile is in play
    #####: 1200:            if ( state->supplyCount[choice1] == -1 )
        -: 1201:            {
    #####: 1202:                return -1;
        -: 1203:            }
        -: 1204:            
        -: 1205:            //add embargo token to selected supply pile
    #####: 1206:            state->embargoTokens[choice1]++;
        -: 1207:            
        -: 1208:            //trash card
    #####: 1209:            discardCard(handPos, currentPlayer, state, 1);    
    #####: 1210:            return 0;
        -: 1211:            
        -: 1212:        case outpost:
        -: 1213:            //set outpost flag
    #####: 1214:            state->outpostPlayed++;
        -: 1215:            
        -: 1216:            //discard card
    #####: 1217:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1218:            return 0;
        -: 1219:            
        -: 1220:            
        -: 1221:        case sea_hag:
    #####: 1222:            for (i = 0; i < state->numPlayers; i++){
    #####: 1223:                if (i != currentPlayer){
    #####: 1224:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1225:                    state->discardCount[i]++;
    #####: 1226:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1227:                }
    #####: 1228:            }
    #####: 1229:            return 0;
        -: 1230:            
        -: 1231:        case treasure_map:
        -: 1232:            //search hand for another treasure_map
    #####: 1233:            index = -1;
    #####: 1234:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1235:            {
    #####: 1236:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1237:                {
    #####: 1238:                    index = i;
    #####: 1239:                    break;
        -: 1240:                }
    #####: 1241:            }
    #####: 1242:            if (index > -1)
        -: 1243:            {
        -: 1244:                //trash both treasure cards
    #####: 1245:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1246:                discardCard(index, currentPlayer, state, 1);
        -: 1247:                
        -: 1248:                //gain 4 Gold cards
    #####: 1249:                for (i = 0; i < 4; i++)
        -: 1250:                {
    #####: 1251:                    gainCard(gold, state, 1, currentPlayer);
    #####: 1252:                }
        -: 1253:                
        -: 1254:                //return success
    #####: 1255:                return 1;
        -: 1256:            }
        -: 1257:            
        -: 1258:            //no second treasure_map found in hand
    #####: 1259:            return -1;
        -: 1260:    }
        -: 1261:    
    #####: 1262:    return -1;
        3: 1263:}
        -: 1264:
        -: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:    
        -: 1268:    //if card is not trashed, added to Played pile 
        3: 1269:    if (trashFlag < 1)
        -: 1270:    {
        -: 1271:        //add card to played pile
        3: 1272:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1273:        state->playedCardCount++;
        3: 1274:    }
        -: 1275:    
        -: 1276:    //set played card to -1
        3: 1277:    state->hand[currentPlayer][handPos] = -1;
        -: 1278:    
        -: 1279:    //remove card from player's hand
        3: 1280:    if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
        -: 1281:    {
        -: 1282:        //reduce number of cards in hand
    #####: 1283:        state->handCount[currentPlayer]--;
    #####: 1284:    }
        3: 1285:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1286:    {
        -: 1287:        //reduce number of cards in hand
    #####: 1288:        state->handCount[currentPlayer]--;
    #####: 1289:    }
        -: 1290:    else  
        -: 1291:    {
        -: 1292:        //replace discarded card with last card in hand
        3: 1293:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:        //set last card to -1
        3: 1295:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:        //reduce number of cards in hand
        3: 1297:        state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:    
        3: 1300:    return 0;
        -: 1301:}
        -: 1302:
        -: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:    //Note: supplyPos is enum of choosen card
        -: 1306:    
        -: 1307:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1308:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1309:    {
    #####: 1310:        return -1;
        -: 1311:    }
        -: 1312:    
        -: 1313:    //added card for [whoseTurn] current player:
        -: 1314:    // toFlag = 0 : add to discard
        -: 1315:    // toFlag = 1 : add to deck
        -: 1316:    // toFlag = 2 : add to hand
        -: 1317:    
    #####: 1318:    if (toFlag == 1)
        -: 1319:    {
    #####: 1320:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1321:        state->deckCount[player]++;
    #####: 1322:    }
    #####: 1323:    else if (toFlag == 2)
        -: 1324:    {
    #####: 1325:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1326:        state->handCount[player]++;
    #####: 1327:    }
        -: 1328:    else
        -: 1329:    {
    #####: 1330:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1331:        state->discardCount[player]++;
        -: 1332:    }
        -: 1333:    
        -: 1334:    //decrease number in supply pile
    #####: 1335:    state->supplyCount[supplyPos]--;
        -: 1336:    
    #####: 1337:    return 0;
    #####: 1338:}
        -: 1339:
        -: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:    int i;
        -: 1343:    
        -: 1344:    //reset coin count
        8: 1345:    state->coins = 0;
        -: 1346:    
        -: 1347:    //add coins for each Treasure card in player's hand
       96: 1348:    for (i = 0; i < state->handCount[player]; i++)
        -: 1349:    {
       40: 1350:        if (state->hand[player][i] == copper)
        -: 1351:        {
       32: 1352:            state->coins += 1;
       32: 1353:        }
        8: 1354:        else if (state->hand[player][i] == silver)
        -: 1355:        {
    #####: 1356:            state->coins += 2;
    #####: 1357:        }
        8: 1358:        else if (state->hand[player][i] == gold)
        -: 1359:        {
    #####: 1360:            state->coins += 3;
    #####: 1361:        } 
       40: 1362:    } 
        -: 1363:    
        -: 1364:    //add bonus
        8: 1365:    state->coins += bonus;
        -: 1366:    
        8: 1367:    return 0;
        -: 1368:}
